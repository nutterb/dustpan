% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ifelse_fast.R
\name{ifelse_fast}
\alias{ifelse_fast}
\title{Faster ifelse}
\usage{
ifelse_fast(x, test, yes, no)
}
\arguments{
\item{x}{A vector on which replacement should be performed.}

\item{test}{A logical expression}

\item{yes}{The values to impress upon \code{x} when \code{test} is \code{TRUE}.}

\item{no}{The values to impress upon \code{x} when \code{test} is \code{FALSE}.}
}
\description{
Perform an \code{ifelse} like function, but use subsetting instead of the
  vectorized \code{ifelse}.  This has the potential to be much faster than \code{ifelse},
  which will be important when working on large tables.  It differs from \code{ifelse} in
  that the vector on which replacements are being performed must already exist.
}
\examples{
\dontrun{
set.seed(1)
x <- rep(NA, 1e7)

notNA <- sample(1:1e7, 1e4)
x[notNA] <- "not missing"

system.time({
  y1 <- ifelse(is.na(x), "", "font-weight:bold;")
})

system.time({
  y2 <- ifelse_fast(x, is.na(x), "", "font-weight:bold;")
})
}
}
\author{
Benjamin Nutter
}

